version: "3.5"

networks:
  frontend:
    name: frontend
    ipam:
      config:
        - subnet: 172.28.240.0/24
  backend:
    name: backend
    ipam:
      config:
        - subnet: 172.28.241.0/24
  hass-bridge:
    name: hass-bridge
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.242.0/24

services:
  traefik:
    container_name: traefik
    image: traefik:v2.1
    hostname: traefik
    command:
      - --certificatesresolvers.default.acme.email=${CLOUDFLARE_API_EMAIL}
    ports:
      - "80:80"
      - "443:443"
      - "8081:8081"
      - "8883:8883"
    networks:
      frontend:
      backend:
    environment:
      - PUID=1000
      - GUID=999
      - CF_API_EMAIL=${CLOUDFLARE_API_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    volumes:
      - ./traefik:/etc/traefik
      - ./acme:/acme
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped    
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # Dashboard and API
      traefik.http.routers.api-insecure.rule: Host(`${HOSTNAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      traefik.http.routers.api-insecure.entrypoints: http
      traefik.http.routers.api-insecure.middlewares: httpsRedirect@file
      traefik.http.routers.api-insecure.service: api@internal
      traefik.http.routers.api.rule: Host(`${HOSTNAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      traefik.http.routers.api.entrypoints: https
      traefik.http.routers.api.tls.certresolver: default
      traefik.http.routers.api.tls.options: default
      traefik.http.routers.api.service: api@internal

  deconz:
    container_name: deconz
    image: marthoc/deconz
    hostname: deconz
    ports:
      - "5900:15900"
    networks:
      frontend:
        ipv4_address: 172.28.240.10
      backend:
        ipv4_address: 172.28.241.10
    volumes:
      - ./deconz:/root/.local/share/dresden-elektronik/deCONZ
    devices:
      - /dev/serial/by-id/usb-dresden_elektronik_ingenieurtechnik_GmbH_ConBee_II_DE2120741-if00:/dev/ttyACM0
    environment:
      - TZ=Europe/London
      - DECONZ_DEVICE=/dev/ttyACM0
      - DECONZ_WEB_PORT=8080
      - DECONZ_WS_PORT=8081
      - DECONZ_UPNP=0
      - DECONZ_VNC_MODE=1
      - DECONZ_VNC_PORT=15900
      - DEBUG_INFO=1
      - DEBUG_APS=0
      - DEBUG_ZCL=0
      - DEBUG_ZDP=0
      - DEBUG_OTAU=0
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # HTTP->HTTPS redirect
      traefik.http.routers.deconz-insecure.rule: Host(`${DECONZ_FQDN}`)
      traefik.http.routers.deconz-insecure.entrypoints: http
      traefik.http.routers.deconz-insecure.middlewares: httpsRedirect@file
      traefik.http.routers.deconz-insecure.service: deconz
      # Web UI
      traefik.http.routers.deconz.rule: Host(`${DECONZ_FQDN}`)
      traefik.http.routers.deconz.entrypoints: https
      traefik.http.routers.deconz.tls.certresolver: default
      traefik.http.routers.deconz.tls.options: default
      traefik.http.routers.deconz.service: deconz
      traefik.http.services.deconz.loadbalancer.server.scheme: http
      traefik.http.services.deconz.loadbalancer.server.port: 8080
      # Web UI WebSockets
      traefik.http.routers.deconz-wss.rule: Host(`${DECONZ_FQDN}`)
      traefik.http.routers.deconz-wss.entrypoints: websocket
      traefik.http.routers.deconz-wss.tls.certresolver: default
      traefik.http.routers.deconz-wss.tls.options: default
      traefik.http.routers.deconz-wss.service: deconz-wss
      traefik.http.services.deconz-wss.loadbalancer.server.scheme: http
      traefik.http.services.deconz-wss.loadbalancer.server.port: 8081
      
  hass:
    container_name: hass
    image: homeassistant/raspberrypi4-homeassistant:stable
    hostname: hass
    ports:
      - "51828:51828"
    networks:
      frontend:
      backend:
      hass-bridge:
    volumes:
      - ./home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${PUID}
      - GUID=${GUID}
    healthcheck:
      test: "curl -Lf http://localhost:8123"
      start_period: 6m
      timeout: 15s
      interval: 30s
      retries: 3
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # HTTP->HTTPS redirect
      traefik.http.routers.hass-insecure.rule: Host(`${HASS_FQDN}`)
      traefik.http.routers.hass-insecure.entrypoints: http
      traefik.http.routers.hass-insecure.middlewares: httpsRedirect@file
      # Web UI
      traefik.http.routers.hass.rule: Host(`${HASS_FQDN}`)
      traefik.http.routers.hass.entrypoints: https
      traefik.http.routers.hass.tls.certresolver: default
      traefik.http.routers.hass.tls.options: default
      traefik.http.services.hass.loadbalancer.server.scheme: http
      traefik.http.services.hass.loadbalancer.server.port: 8123

  argo:
    container_name: argo
    image: msnelling/cloudflared:latest
    networks:
      frontend:
    environment:
      - "TUNNEL_HOSTNAME=${HASS_FQDN}"
      - "TUNNEL_URL=http://hass:8123"
      - "TUNNEL_METRICS=127.0.0.1:"
    volumes:
      - ./cloudflared/cert.pem:/etc/cloudflared/cert.pem:ro
    depends_on:
      - hass
    restart: unless-stopped

  mqtt:
    container_name: mqtt
    image: eclipse-mosquitto:latest
    hostname: mqtt
    ports:
      - 1883:1883
    networks:
      frontend:
      backend:
    environment:
      - PUID=1000
      - PGID=999
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./mqtt/config:/mosquitto/config:ro
      - ./mqtt/data:/mosquitto/data
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # MQTT
      traefik.tcp.routers.mqtt.rule: HostSNI(`${MQTT_FQDN}`)
      traefik.tcp.routers.mqtt.entrypoints: mqtt
      traefik.tcp.routers.mqtt.tls.certresolver: default
      traefik.tcp.routers.mqtt.tls.options: default
      traefik.tcp.services.mqtt.loadbalancer.server.port: 1883
      # WebSocket
      traefik.http.routers.mqtt.rule: Host(`${MQTT_FQDN}`)
      traefik.http.routers.mqtt.entrypoints: https
      traefik.http.routers.mqtt.tls.certresolver: default
      traefik.http.routers.mqtt.tls.options: default
      traefik.http.services.mqtt.loadbalancer.server.scheme: http
      traefik.http.services.mqtt.loadbalancer.server.port: 8003
