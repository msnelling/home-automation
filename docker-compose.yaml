version: "3.5"

volumes:
  chronograf_data:

networks:
  frontend:
    name: frontend
    ipam:
      config:
        - subnet: 172.28.240.0/24
  backend:
    name: backend
    ipam:
      config:
        - subnet: 172.28.241.0/24
  hass-bridge:
    name: hass-bridge
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.242.0/24

services:
  traefik:
    container_name: traefik
    image: traefik:v2.2
    hostname: traefik
    command:
      - --certificatesresolvers.default.acme.email=${CLOUDFLARE_API_EMAIL}
    ports:
      - "80:80"
      - "443:443"
      - "8081:8081"
      - "8883:8883"
    networks:
      frontend:
      backend:
    environment:
      - PUID=${PUID}
      - GUID=${GUID}
      - CF_API_EMAIL=${CLOUDFLARE_API_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    volumes:
      - ./traefik:/etc/traefik
      - ./acme:/acme
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped    
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # HTTP->HTTPS redirect
      traefik.http.routers.api-insecure.rule: Host(`${HOSTNAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      traefik.http.routers.api-insecure.entrypoints: http
      traefik.http.routers.api-insecure.middlewares: httpsRedirect@file
      traefik.http.routers.api-insecure.service: api@internal
      # Dashboard and API
      traefik.http.routers.api.rule: Host(`${HOSTNAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      traefik.http.routers.api.entrypoints: https
      traefik.http.routers.api.tls.certresolver: default
      traefik.http.routers.api.tls.options: default
      traefik.http.routers.api.service: api@internal

  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    hostname: portainer
    ports:
      - "8000:8000/tcp"
    networks:
      frontend:
    volumes:
      - ./portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # HTTP->HTTPS redirect
      traefik.http.routers.portainer-insecure.rule: PathPrefix(`/portainer`)
      traefik.http.routers.portainer-insecure.entrypoints: http
      traefik.http.routers.portainer-insecure.middlewares: httpsRedirect@file
      traefik.http.routers.portainer-insecure.service: portainer
      # Web UI
      traefik.http.routers.portainer.rule: PathPrefix(`/portainer`)
      traefik.http.routers.portainer.entrypoints: https
      traefik.http.routers.portainer.tls.certresolver: default
      traefik.http.routers.portainer.tls.options: default
      traefik.http.routers.portainer.middlewares: trailingSlashFix@file
      traefik.http.services.portainer.loadbalancer.server.port: 9000
      
  hass:
    container_name: hass
    image: homeassistant/raspberrypi4-homeassistant:stable
    hostname: hass
    ports:
      - "51828:51828"
    networks:
      frontend:
      backend:
      hass-bridge:
    volumes:
      - ./home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${PUID}
      - GUID=${GUID}
    healthcheck:
      test: "curl -Lf http://localhost:8123"
      start_period: 6m
      timeout: 15s
      interval: 30s
      retries: 3
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # HTTP->HTTPS redirect
      traefik.http.routers.hass-insecure.rule: Host(`${HASS_FQDN}`)
      traefik.http.routers.hass-insecure.entrypoints: http
      traefik.http.routers.hass-insecure.middlewares: httpsRedirect@file
      # Web UI
      traefik.http.routers.hass.rule: Host(`${HASS_FQDN}`)
      traefik.http.routers.hass.entrypoints: https
      traefik.http.routers.hass.tls.certresolver: default
      traefik.http.routers.hass.tls.options: default
      traefik.http.services.hass.loadbalancer.server.scheme: http
      traefik.http.services.hass.loadbalancer.server.port: 8123

  argo:
    container_name: argo
    image: msnelling/cloudflared:latest
    networks:
      frontend:
    environment:
      - "TUNNEL_HOSTNAME=${HASS_FQDN}"
      - "TUNNEL_URL=https://${HASS_FQDN}"
      - "TUNNEL_METRICS=127.0.0.1:"
    volumes:
      - ./cloudflared/cert.pem:/etc/cloudflared/cert.pem:ro
    depends_on:
      - hass
    restart: unless-stopped

  mqtt:
    container_name: mqtt
    image: eclipse-mosquitto:latest
    hostname: mqtt
    ports:
      - 1883:1883
    networks:
      frontend:
      backend:
    environment:
      - PUID=${PUID}
      - PGID=${GUID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./mqtt/config:/mosquitto/config:ro
      - ./mqtt/data:/mosquitto/data
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # MQTT
      #traefik.tcp.routers.mqtt.rule: HostSNI(`${MQTT_FQDN}`)
      #traefik.tcp.routers.mqtt.entrypoints: mqtt
      #traefik.tcp.routers.mqtt.tls.certresolver: default
      #traefik.tcp.routers.mqtt.tls.options: default
      #traefik.tcp.services.mqtt.loadbalancer.server.port: 1883
      # WebSocket
      traefik.http.routers.mqtt.rule: Host(`${MQTT_FQDN}`)
      traefik.http.routers.mqtt.entrypoints: https
      traefik.http.routers.mqtt.tls.certresolver: default
      traefik.http.routers.mqtt.tls.options: default
      traefik.http.services.mqtt.loadbalancer.server.scheme: http
      traefik.http.services.mqtt.loadbalancer.server.port: 8003

  z2m:
    container_name: z2m
    image: koenkk/zigbee2mqtt:latest-dev
    networks:
      backend:
    devices:
      - /dev/serial/by-id/usb-dresden_elektronik_ingenieurtechnik_GmbH_ConBee_II_DE2120741-if00:/dev/ttyACM0
    volumes:
      - ./zigbee2mqtt:/app/data
      - /run/udev:/run/udev:ro
    environment:
      - TZ=Europe/London
    privileged: true
    restart: unless-stopped

  z2ma:
    image: carldebilly/zigbee2mqttassistant:dev
    container_name: z2ma
    ports:
      - 8880:80
    networks:
      backend:
    environment:
      - Z2MA_SETTINGS__MQTTSERVER=mqtt
      - TZ=Europe/London
    restart: unless-stopped

  influxdb:
    container_name: influxdb
    image: influxdb:latest
    hostname: influxdb
    networks:
      backend:
    volumes:
      - ./influxdb:/var/lib/influxdb
    restart: unless-stopped

  chronograf:
    container_name: chronograf
    image: chronograf:latest
    command:
      - chronograf
      - --basepath=/chronograf
      - --influxdb-url=http://influxdb:8086
    networks:
      frontend:
      backend:
    volumes:
      - chronograf_data:/var/lib/chronograf
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # HTTP->HTTPS redirect
      traefik.http.routers.chronograf-insecure.rule: PathPrefix(`/chronograf`)
      traefik.http.routers.chronograf-insecure.entrypoints: http
      traefik.http.routers.chronograf-insecure.middlewares: httpsRedirect@file
      # Web UI
      traefik.http.routers.chronograf.rule: PathPrefix(`/chronograf`)
      traefik.http.routers.chronograf.entrypoints: https
      traefik.http.routers.chronograf.tls.certresolver: default
      traefik.http.routers.chronograf.tls.options: default
      traefik.http.services.chronograf.loadbalancer.server.scheme: http
      traefik.http.services.chronograf.loadbalancer.server.port: 8888

  grafana:
    container_name: grafana
    image: grafana/grafana:master
    networks:
      frontend:
      backend:
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/data:/var/lib/grafana
    user: "472"
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # HTTP->HTTPS redirect
      traefik.http.routers.grafana-insecure.rule: PathPrefix(`/grafana`)
      traefik.http.routers.grafana-insecure.entrypoints: http
      traefik.http.routers.grafana-insecure.middlewares: httpsRedirect@file
      # Web UI
      traefik.http.routers.grafana.rule: PathPrefix(`/grafana`)
      traefik.http.routers.grafana.entrypoints: https
      traefik.http.routers.grafana.tls.certresolver: default
      traefik.http.routers.grafana.tls.options: default
      traefik.http.services.grafana.loadbalancer.server.scheme: http
      traefik.http.services.grafana.loadbalancer.server.port: 3000

  nodered:
    container_name: node-red
    image: nodered/node-red:latest
    environment:
      - TZ=Europe/London
      - ADMIN_AUTH=${NODERED_ADMIN_AUTH}
    networks:
      frontend:
      backend:
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./node-red:/data:rw
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: frontend
      # HTTP->HTTPS redirect
      traefik.http.routers.nodered-insecure.rule: PathPrefix(`/nodered`)
      traefik.http.routers.nodered-insecure.entrypoints: http
      traefik.http.routers.nodered-insecure.middlewares: httpsRedirect@file
      # Web UI
      traefik.http.routers.nodered.rule: PathPrefix(`/nodered`)
      traefik.http.routers.nodered.entrypoints: https
      traefik.http.routers.nodered.tls.certresolver: default
      traefik.http.routers.nodered.tls.options: default
      traefik.http.services.nodered.loadbalancer.server.scheme: http
      traefik.http.services.nodered.loadbalancer.server.port: 1880
